{"instruction": "Write a Java function that adds two integers and returns their sum.", "response": "public int addNumbers(int a, int b) { return a + b; }"}
{"instruction": "Write a Java function that reverses the given string and returns the result.", "response": "public String reverseString(String input) { StringBuilder sb = new StringBuilder(input); return sb.reverse().toString(); }"}
{"instruction": "Write a Java function that checks if the given number is even and returns true if it is.", "response": "public boolean isEven(int number) { return number % 2 == 0; }"}
{"instruction": "Write a Java function that calculates the area of a circle given its radius.", "response": "public double calculateArea(double radius) { return Math.PI * radius * radius; }"}
{"instruction": "Write a Java function that concatenates two strings and returns the result.", "response": "public String concatenateStrings(String str1, String str2) { return str1 + str2; }"}
{"instruction": "Write a Java function that calculates the factorial of a given number recursively.", "response": "public int factorial(int n) { if (n == 0) return 1; return n * factorial(n - 1); }"}
{"instruction": "Write a Java function that checks if the given string is a palindrome.", "response": "public boolean isPalindrome(String str) { String reversed = new StringBuilder(str).reverse().toString(); return str.equals(reversed); }"}
{"instruction": "Write a Java function that finds the maximum number in an array of integers.", "response": "public int findMax(int[] numbers) { int max = numbers[0]; for (int num : numbers) { if (num > max) max = num; } return max; }"}
{"instruction": "Write a Java function that prints the first n Fibonacci numbers.", "response": "public void printFibonacci(int n) { int a = 0, b = 1; for (int i = 0; i < n; i++) { System.out.print(a + \" \"); int next = a + b; a = b; b = next; } }"}
{"instruction": "Write a Java function that checks if the given number is prime and returns true if it is.", "response": "public boolean isPrime(int number) { if (number <= 1) return false; for (int i = 2; i <= Math.sqrt(number); i++) { if (number % i == 0) return false; } return true; }"}
{"instruction": "Write a Java function that sorts an array of integers using the bubble sort algorithm.", "response": "public int[] bubbleSort(int[] arr) { int n = arr.length; for (int i = 0; i < n - 1; i++) { for (int j = 0; j < n - i - 1; j++) { if (arr[j] > arr[j + 1]) { int temp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = temp; } } } return arr; }"}
{"instruction": "Write a Java function that splits a string into an array using the specified delimiter.", "response": "public String[] splitString(String str, String delimiter) { return str.split(delimiter); }"}
{"instruction": "Write a Java function that calculates the greatest common divisor (GCD) of two integers.", "response": "public int gcd(int a, int b) { while (b != 0) { int temp = b; b = a % b; a = temp; } return a; }"}
{"instruction": "Write a Java function that checks if an array contains a specific element.", "response": "public boolean containsElement(int[] arr, int element) { for (int num : arr) { if (num == element) return true; } return false; }"}
{"instruction": "Write a Java function that converts a string to uppercase.", "response": "public String toUpperCase(String str) { return str.toUpperCase(); }"}
{"instruction": "Write a Java function that calculates the average of an array of integers.", "response": "public double calculateAverage(int[] numbers) { int sum = 0; for (int num : numbers) { sum += num; } return (double) sum / numbers.length; }"}
{"instruction": "Write a Java function that prints the multiplication table for a given number.", "response": "public void printMultiplicationTable(int number) { for (int i = 1; i <= 10; i++) { System.out.println(number + \" x \" + i + \" = \" + (number * i)); } }"}
{"instruction": "Write a Java function that merges two sorted arrays into one sorted array.", "response": "public int[] mergeSortedArrays(int[] arr1, int[] arr2) { int[] merged = new int[arr1.length + arr2.length]; int i = 0, j = 0, k = 0; while (i < arr1.length && j < arr2.length) { if (arr1[i] < arr2[j]) { merged[k++] = arr1[i++]; } else { merged[k++] = arr2[j++]; } } while (i < arr1.length) merged[k++] = arr1[i++]; while (j < arr2.length) merged[k++] = arr2[j++]; return merged; }"}